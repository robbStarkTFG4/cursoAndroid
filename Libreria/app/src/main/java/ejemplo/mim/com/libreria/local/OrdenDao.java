package ejemplo.mim.com.libreria.local;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDEN.
*/
public class OrdenDao extends AbstractDao<Orden, Long> {

    public static final String TABLENAME = "ORDEN";

    /**
     * Properties of entity Orden.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cantidad = new Property(1, Integer.class, "cantidad", false, "CANTIDAD");
        public final static Property Total = new Property(2, Integer.class, "total", false, "TOTAL");
        public final static Property Costo = new Property(3, Integer.class, "costo", false, "COSTO");
        public final static Property OrdenId = new Property(4, Long.class, "ordenId", false, "ORDEN_ID");
        public final static Property LibroId = new Property(5, Long.class, "libroId", false, "LIBRO_ID");
        public final static Property OrdenIdCarrito = new Property(6, Long.class, "ordenIdCarrito", false, "ORDEN_ID_CARRITO");
        public final static Property CarrId = new Property(7, Long.class, "carrId", false, "CARR_ID");
    };

    private DaoSession daoSession;

    private Query<Orden> libro_OrdenListQuery;
    private Query<Orden> carrito_OrdenListQuery;

    public OrdenDao(DaoConfig config) {
        super(config);
    }
    
    public OrdenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDEN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CANTIDAD' INTEGER," + // 1: cantidad
                "'TOTAL' INTEGER," + // 2: total
                "'COSTO' INTEGER," + // 3: costo
                "'ORDEN_ID' INTEGER," + // 4: ordenId
                "'LIBRO_ID' INTEGER," + // 5: libroId
                "'ORDEN_ID_CARRITO' INTEGER," + // 6: ordenIdCarrito
                "'CARR_ID' INTEGER);"); // 7: carrId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDEN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Orden entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(2, cantidad);
        }
 
        Integer total = entity.getTotal();
        if (total != null) {
            stmt.bindLong(3, total);
        }
 
        Integer costo = entity.getCosto();
        if (costo != null) {
            stmt.bindLong(4, costo);
        }
 
        Long ordenId = entity.getOrdenId();
        if (ordenId != null) {
            stmt.bindLong(5, ordenId);
        }
 
        Long libroId = entity.getLibroId();
        if (libroId != null) {
            stmt.bindLong(6, libroId);
        }
 
        Long ordenIdCarrito = entity.getOrdenIdCarrito();
        if (ordenIdCarrito != null) {
            stmt.bindLong(7, ordenIdCarrito);
        }
 
        Long carrId = entity.getCarrId();
        if (carrId != null) {
            stmt.bindLong(8, carrId);
        }
    }

    @Override
    protected void attachEntity(Orden entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Orden readEntity(Cursor cursor, int offset) {
        Orden entity = new Orden( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cantidad
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // total
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // costo
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ordenId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // libroId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // ordenIdCarrito
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // carrId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Orden entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCantidad(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTotal(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCosto(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrdenId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLibroId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setOrdenIdCarrito(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCarrId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Orden entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Orden entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ordenList" to-many relationship of Libro. */
    public List<Orden> _queryLibro_OrdenList(Long libroId) {
        synchronized (this) {
            if (libro_OrdenListQuery == null) {
                QueryBuilder<Orden> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LibroId.eq(null));
                libro_OrdenListQuery = queryBuilder.build();
            }
        }
        Query<Orden> query = libro_OrdenListQuery.forCurrentThread();
        query.setParameter(0, libroId);
        return query.list();
    }

    /** Internal query to resolve the "ordenList" to-many relationship of Carrito. */
    public List<Orden> _queryCarrito_OrdenList(Long ordenIdCarrito) {
        synchronized (this) {
            if (carrito_OrdenListQuery == null) {
                QueryBuilder<Orden> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrdenIdCarrito.eq(null));
                carrito_OrdenListQuery = queryBuilder.build();
            }
        }
        Query<Orden> query = carrito_OrdenListQuery.forCurrentThread();
        query.setParameter(0, ordenIdCarrito);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLibroDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCarritoDao().getAllColumns());
            builder.append(" FROM ORDEN T");
            builder.append(" LEFT JOIN LIBRO T0 ON T.'ORDEN_ID'=T0.'_id'");
            builder.append(" LEFT JOIN CARRITO T1 ON T.'CARR_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Orden loadCurrentDeep(Cursor cursor, boolean lock) {
        Orden entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Libro libro = loadCurrentOther(daoSession.getLibroDao(), cursor, offset);
        entity.setLibro(libro);
        offset += daoSession.getLibroDao().getAllColumns().length;

        Carrito carrito = loadCurrentOther(daoSession.getCarritoDao(), cursor, offset);
        entity.setCarrito(carrito);

        return entity;    
    }

    public Orden loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Orden> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Orden> list = new ArrayList<Orden>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Orden> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Orden> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
